######################################################################
# Author Name: Fred Glozman
# Author Student ID: 260635610
# University: McGill
# Course: COMP-551: Applied Machine Learning
# Instructor: Joelle Pineau
# Project 1: A multilingual dialogue dataset
# Due Date: September 27th 2017
# Team:     Fred Glozman - fred.glozman@mail.mcgill.ca - 260635610 
#           Raihan Seraj  -raihan.seraj@mail.mcgill.ca - 260752605
#           Oruj Ahmadov - oruj.ahmadov@mail.mcgill.ca - 260523568
#
# Description: This script reads from the JSON file generated by 
# the RussianOtvetCrawler.py script and formats it's content as 
# an XML file.
#
# Instructions: Run this only after executing RussianOtvetCrawler.py
#
# Result:
# - this script will generate an XML file titled corpus.json 
# containing all the conversations found in the file titled items.json
######################################################################

import re
import json
import codecs
import xml.etree.cElementTree as ET

INPUT_FILE_NAME = 'items.json'
OUTPUT_FILE_NAME = 'groupname_rus.xml'

ENCODING = 'utf-8'

# tags and attributes of the output xml file
ROOT = 'dialog'
CONVERSATION = 's'
UTTERANCE = 'utt'

# parameters of the input JSON file
SPEAKERS = 'speakers'
UTTERANCES = 'utterances'
URL = 'url'

TOP_WORDS = 10
MIN_WORD_LENGTH = 3

ISO_LANGUAGE_CODE = 'rus'

# reads the JSON objects from the input file
def getItems():
    with open(INPUT_FILE_NAME, 'r') as data_file:
        json_data = data_file.read()
    data = json.loads(json_data)
    return data

def cleanUtterance(utterance):
	utterance = re.sub(r"\s+", " ", utterance)
	utterance = re.sub(r'\&', '&amp;', utterance)
	utterance = re.sub(r'\<', '&lt;', utterance)
	utterance = re.sub(r'\>', '&gt;', utterance)
	utterance = re.sub(r'\'', '&apos;', utterance)
	utterance = re.sub(r'\"', '&quot;', utterance)
	return utterance

# generates the xml output file from the input json data set
def generateCorpus(data): 
    corpus = {
        # key: speaker 
        # value: number of times speaker appears in corpus
        'speakers': {},
        # key: conversation url
        # value: [(speaker, uid, utterane)]
        'conversations': {},
        # key: word
        # value: number of times word appears in corpus
        'words': {},
    }
    
    dialog = ET.Element(ROOT)

    author_uid = 0
    for item in data:
        speakers = item[SPEAKERS]
        utterances = item[UTTERANCES]
        url = item[URL]
        
        conversation = []
        
        for i in range(len(utterances)):
            speaker = speakers[i]
            utterance = cleanUtterance(utterances[i])
            
            if len(utterance) <= 0:
                continue
            
            uid = author_uid
            if speaker in corpus['speakers']:
                uid = corpus['speakers'][speaker]
            else:
                corpus['speakers'][speaker] = uid;
                author_uid += 1
                        
            for word in utterance.split():
                if word in corpus['words']:
                    corpus['words'][word] += 1
                else:
                    corpus['words'][word] = 1;
                                
            if url not in corpus['conversations']:
                corpus['conversations'][url] = []

            corpus['conversations'][url] += [(speaker, uid, utterance)]
    
    for k,v in corpus['conversations'].items():
        if len(v) <= 1:
            del corpus['conversations'][k]
            continue
        
        s = ET.SubElement(dialog, CONVERSATION)
        for utterance in v:
            uid = utterance[1]
            text = utterance[2]
            ET.SubElement(s, UTTERANCE, uid = str(uid)).text = text
        
    tree = ET.ElementTree(dialog)
    tree.write(OUTPUT_FILE_NAME, encoding=ENCODING, xml_declaration=True)
    
    return corpus


data = getItems();
corpus = generateCorpus(data);